//Server.java
import java.io.*;
 import java.net.*;
 import java.util.*;
 import java.awt.*;
 import javax.swing.*;
 
 public class Server extends JFrame {
		// Text area for displaying contents
		private JTextArea displayContents = new JTextArea();

		public static void main(String[] args) {
			new Server();
		}

		public Server() {
			// Place text area on the frame
			getContentPane().setLayout(new BorderLayout());
			getContentPane().add(new JScrollPane(displayContents), BorderLayout.CENTER);

			setTitle("Server");
			setSize(500, 300);
			setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			setVisible(true); // It is necessary to show the frame here!

			try {
				// Create a server socket
				ServerSocket serverSocket = new ServerSocket(8000);
				displayContents.append("Server started at " + new Date() + '\n');

				// Listen for a connection request
				Socket socket = serverSocket.accept();

				// Create data input and output streams
				DataInputStream inputFromClient = new DataInputStream(socket.getInputStream());
				DataOutputStream outputToClient = new DataOutputStream(socket.getOutputStream());

				while (true) {
					// Receive height and weight from the client
					double height = inputFromClient.readDouble();
					double weight = inputFromClient.readDouble();
					
					// Compute BMI
					double bmi = weight / (height * height);

					// Send BMI back to the client
					outputToClient.writeDouble(bmi);

					displayContents.append("Weight received from client: " + weight + '\n');
					displayContents.append("Height received from client: " + height + '\n');
					displayContents.append("BMI found: " + bmi + '\n');
				}
			}
			catch(IOException ex) {
				System.err.println(ex);
			}
		}
	}
 //Client.java
 import java.io.*;
 import java.net.*;
 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 
public class Client extends JFrame implements ActionListener {
   // Text field for receiving height and weight
   private JTextField weightTextField = new JTextField();
   private JTextField heightTextField = new JTextField();
 
   // Text area to display contents
   private JTextArea displayContents = new JTextArea();
 
   // IO streams
   private DataOutputStream outputToServer;
   private DataInputStream inputFromServer;
 
   public static void main(String[] args) {
     new Client();
   }
 
public Client() {
     // Panel to hold the height label and text field
     JPanel panelHeight = new JPanel();
     panelHeight.setLayout(new BorderLayout());
     panelHeight.add(new JLabel("Enter height in Meters:"), BorderLayout.WEST);
     panelHeight.add(heightTextField, BorderLayout.CENTER);
     heightTextField.setHorizontalAlignment(JTextField.RIGHT);
     
     //Panel for weight
     JPanel panelWeight = new JPanel();
     panelWeight.setLayout(new BorderLayout());
     panelWeight.add(new JLabel("Enter weight in Kilograms:"), BorderLayout.WEST);
     panelWeight.add(weightTextField, BorderLayout.CENTER);
     weightTextField.setHorizontalAlignment(JTextField.RIGHT);
 
     // Panel to hold the panels 
  		JPanel comboPanel = new JPanel();
  		comboPanel.setLayout(new BorderLayout());
  		comboPanel.add(panelHeight, BorderLayout.NORTH);
  		comboPanel.add(panelWeight, BorderLayout.SOUTH);
  		heightTextField.setHorizontalAlignment(JTextField.LEFT);
  		weightTextField.setHorizontalAlignment(JTextField.LEFT);
  		
     getContentPane().setLayout(new BorderLayout());
     getContentPane().add(comboPanel, BorderLayout.NORTH);
     getContentPane().add(new JScrollPane(displayContents), BorderLayout.CENTER);
 
     heightTextField.addActionListener(this); // Register listener
     weightTextField.addActionListener(this); // Register listener

 
     setTitle("Client");
     setSize(500, 300);
     setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     setVisible(true); // It is necessary to show the frame here!
 
     try {
       // Create a socket to connect to the server
       Socket socket = new Socket("localhost", 8000);
       // Socket socket = new Socket("130.254.204.36", 8000);
       // Socket socket = new Socket("drake.Armstrong.edu", 8000);
 
       // Create an input stream to receive data from the server
       inputFromServer = new DataInputStream(
         socket.getInputStream());
 
       // Create an output stream to send data to the server
       outputToServer =
         new DataOutputStream(socket.getOutputStream());
     }
     catch (IOException ex) {
    	 displayContents.append(ex.toString() + '\n');
     }
}
 
   public void actionPerformed(ActionEvent e) {
	String actionCommand = e.getActionCommand();
     if (e.getSource() instanceof JTextField) {
       try {
         // Get the radius from the text field
    	// Get the height and weight from the text field
			double height = Double.parseDouble(heightTextField.getText().trim());
			double weight = Double.parseDouble(weightTextField.getText().trim());

    	   
         // Send the radius to the server
			outputToServer.writeDouble(weight);
			outputToServer.writeDouble(height);
			outputToServer.flush();
 
         // Get area from the server
         double area = inputFromServer.readDouble();
 
         // Display to the text area
         displayContents.append("Weight is " + weight + "\n");
         displayContents.append("Height is " + height + "\n");
         displayContents.append("BMI received from the server is " + bmi + '\n');
       }catch (IOException ex) {
         System.err.println(ex);
       	}
       }
     }
 }
 
 //Question 2 Multi thread server
 import java.io.*;
import java.net.*;
import java.util.*;
import java.awt.*;
import javax.swing.*;

public class MultiThreadServer extends JFrame {
	// Text area for displaying contents
	private JTextArea displayContents = new JTextArea();

	public static void main(String[] args) {
		new MultiThreadServer();
	}

	public MultiThreadServer() {
		// Place text area on the frame
		getContentPane().setLayout(new BorderLayout());
		getContentPane().add(new JScrollPane(displayContents), BorderLayout.CENTER);

		setTitle("MultiThreadServer");
		setSize(500, 300);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true); // It is necessary to show the frame here!

		try {
			// Create a server socket
			ServerSocket serverSocket = new ServerSocket(8000);
			displayContents.append("MultiThreadServer started at " + new Date() + '\n');

			// Number a client
			int clientNo = 1;

			while (true) {
				// Listen for a new connection request
				Socket socket = serverSocket.accept();

				// Display the client number
				displayContents.append("Starting thread for client " + clientNo + " at " + new Date() + '\n');

				// Find the client's host name, and IP address
				InetAddress inetAddress = socket.getInetAddress();
				displayContents.append("Client " + clientNo + "'s host name is " + inetAddress.getHostName() + "\n");
				displayContents.append("Client " + clientNo + "'s IP Address is " + inetAddress.getHostAddress() + "\n");

				// Create a new thread for the connection
				HandleAClient thread = new HandleAClient(socket, clientNo);

				// Start the new thread
				thread.start();

				// Increment clientNo
				clientNo++;
			}
		}
		catch(IOException ex) {
			System.err.println(ex);
		}
	}

	// Inner class
	// Define the thread class for handling new connection
	class HandleAClient extends Thread {
		private Socket socket; // A connected socket
		private int clientNumber;

		/** Construct a thread */
		public HandleAClient(Socket socket, int clientNo) {
			this.socket = socket;
			this.clientNumber = clientNo;
		}
	
		/** Run a thread */
		public void run() {
			try {
				// Create data input and output streams
				DataInputStream inputFromClient = new DataInputStream(socket.getInputStream());
				DataOutputStream outputToClient = new DataOutputStream(socket.getOutputStream());

				// Continuously serve the client
				while (true) {
					// Receive height and weight from the client
					double height = inputFromClient.readDouble();
					double weight = inputFromClient.readDouble();
					
					// Compute BMI
					double bmi = weight / (height * height);

					// Send BMI back to the client
					outputToClient.writeDouble(bmi);

					displayContents.append("Weight received from client " + clientNumber + " : " + weight + '\n');
					displayContents.append("Height received from client " + clientNumber + " : " + height + '\n');
					displayContents.append("BMI found for client " + clientNumber + " : " + bmi + '\n');
				}
			}
			catch(IOException e) {
				System.err.println(e);
			}
		}
	}
  //Question 3
  
  
public class question3 {
    public static <E extends Comparable<E>> int linearSearch(E[] list, E key) {
        for (int i = 0; i< list.length;i++){
            if (list[i] == key){
                return i;
            }
        }
        return -1;
      } 
       
      public static void main(String[] args) { 
        Integer[] list = {3, 4, 5, 1, -3, -5, -1}; 
        System.out.println(linearSearch(list, 2)); 
        System.out.println(linearSearch(list, 5));  
        System.out.println(linearSearch(list, -1)); 
		System.out.println(linearSearch(list, 12));
}
      
}
